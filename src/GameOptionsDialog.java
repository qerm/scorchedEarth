//======================================================
// Source code generated by jvider v1.2.3 UNREGISTERED version.
// http://www.jvider.com/
//======================================================
//import javax.swing.JFrame;
//import javax.swing.UIManager;
//import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.JDialog;
//import javax.swing.BorderFactory;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
//import java.awt.GridBagConstraints;
///import java.awt.GridBagLayout;
import javax.swing.JButton;
import java.awt.Container;
import java.awt.GridLayout;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.JTextField;
import java.awt.FlowLayout;
//import javax.swing.JSeparator;
//import javax.swing.SwingConstants;
//import java.lang.Integer;
import javax.swing.JCheckBox;
import javax.swing.JPasswordField;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
//import java.lang.Math;

/**
 * @author  Team QERM
 * @created April 13, 2003
 */
class GameOptionsDialog extends JDialog implements ActionListener, 
                                                    ChangeListener,
                                                         Constants {

  /**
   * The "Create Game" button
   */
  private JButton btCreate;
  
  /**
   * clicking this loads all the default game values
   */
  private JButton btDefault;
    


  /**
   * This is for checkstyle
   * you can figure out what this is for youself
   * your not an idiot
   */   
  private Container[] rowC;
  


  /**
   * This is for checkstyle
   * you can figure out what this is for youself
   * your not an idiot
   */   
  private JLabel[] labels;



  /**
   * This is for checkstyle
   * you can figure out what this is for youself
   * your not an idiot
   */   
  private JSlider[] sliders;



  /**
   * This is for checkstyle
   * you can figure out what this is for youself
   * your not an idiot
   */   
  private JTextField[] values;




  /**
   * This is for checkstyle
   * you can figure out what this is for youself
   * your not an idiot
   */   
  private JCheckBox stickyWallBox;
  


  /**
   * This is for checkstyle
   * you can figure out what this is for youself
   * your not an idiot
   */     
  private JCheckBox wrapAroundWallBox;
  
  
  /**
   * This is for checkstyle
   * you can figure out what this is for youself
   * your not an idiot
   */     
  private JCheckBox bouncyWallBox;



  /**
   * This is for checkstyle
   * you can figure out what this is for youself
   * your not an idiot
   */   
  private JCheckBox noWallBox;



  /**
   * This is for checkstyle
   * you can figure out what this is for youself
   * your not an idiot
   */   
  private JCheckBox cavesBox;



  /**
   * This is for checkstyle
   * you can figure out what this is for youself
   * your not an idiot
   */   
  private JCheckBox privateBox;



  /**
   * This is for checkstyle
   * you can figure out what this is for youself
   * your not an idiot
   */   
  private JPasswordField passwordField;




  /**
   * This is for checkstyle
   * you can figure out what this is for youself
   * your not an idiot
   */   
  private JTextField gameNameField;



  /**
   * This is for checkstyle
   * you can figure out what this is for youself
   * your not an idiot
   */   
  private JRadioButton smallExplRadio;
  
  
  /**
   * This is for checkstyle
   * you can figure out what this is for youself
   * your not an idiot
   */     
  private JRadioButton medExplRadio;

  /**
   *checkstyle sucks
   */
  private Container c; 
  


  /**
   * This is for checkstyle
   * you can figure out what this is for youself
   * your not an idiot
   */     
  private JRadioButton largeExplRadio;


  /**
   * This is for checkstyle
   * you can figure out what this is for youself
   * your not an idiot
   */   
  private JRadioButton noWindRadio;
  
  
  /**
   * This is for checkstyle
   * you can figure out what this is for youself
   * your not an idiot
   */     
  private JRadioButton constantWindRadio;
  
    /**
   * This is for checkstyle
   * you can figure out what this is for youself
   * your not an idiot
   */   
  private JRadioButton randomWindRadio;



  /**
   * This is for checkstyle
   * you can figure out what this is for youself
   * your not an idiot
   */   
  private ButtonGroup explosionGroup;
  

  /**
   * This is for checkstyle
   * you can figure out what this is for youself
   * your not an idiot
   */     
  private ButtonGroup windGroup;


  /**
   * This is for checkstyle
   * you can figure out what this is for youself
   * your not an idiot
   */   
  private JLabel passwordLabel;

  /**
   * The GameParameters object that
   * this window will be editing
   */  
  private GameParameters gParam;

  /**
   * Get the GParam value.
   * @return GameParameters the GParam value.
   */
  public GameParameters getGParam() {
    return gParam;
  }

  /**
   * Set the GParam value.
   * @param newGParam The new GParam value.
   */
  public void setGParam(GameParameters newGParam) {
    this.gParam = newGParam;
  }

  

  /**
   * The GlobalChatWindow that spawned this dialog
   */
  private GlobalChatWindow gcw;

  /**
   * Get the Gcw value.
   * @return the Gcw value.
   */
  public GlobalChatWindow getGcw() {
    return gcw;
  }

  /**
   * Set the Gcw value.
   * @param newGcw The new Gcw value.
   */
  public void setGcw(GlobalChatWindow newGcw) {
    this.gcw = newGcw;
  }

  /**
   * Default constructor. JUNITING ONLY
   */
  public GameOptionsDialog() {
    //    this (null);
  }


    /**
     * makes rows
     */
    private void initRows() {
    rowC = new Container[15];
    labels = new JLabel[15];
    sliders = new JSlider[15];
    values = new JTextField[15];

    stickyWallBox = new JCheckBox("Sticky");
    wrapAroundWallBox = new JCheckBox("Wrap-Around");
    bouncyWallBox = new JCheckBox("Bouncy");
    noWallBox = new JCheckBox("No Walls");

    cavesBox = new JCheckBox("Yes, please");

    privateBox = new JCheckBox("Make Private");

    smallExplRadio = new JRadioButton("Small");
    medExplRadio = new JRadioButton("Medium");
    largeExplRadio = new JRadioButton("Large");
    
    noWindRadio = new JRadioButton("No Wind");
    constantWindRadio = new JRadioButton("Constant Wind");
    randomWindRadio = new JRadioButton("Randomized Wind");

    passwordLabel = new JLabel("Password");

    windGroup = new ButtonGroup();
    windGroup.add(noWindRadio);
    windGroup.add(constantWindRadio);
    windGroup.add(randomWindRadio);

    explosionGroup = new ButtonGroup();
    explosionGroup.add(smallExplRadio);
    explosionGroup.add(medExplRadio);
    explosionGroup.add(largeExplRadio);

    for (int i = 0; i < 15; i++) {
        rowC[i] = new Container();
        rowC[i].setLayout(new FlowLayout(FlowLayout.LEFT));
        labels[i] = new JLabel();
        sliders[i] = new JSlider();
        sliders[i].setPaintTicks(true);
        sliders[i].setPaintLabels(true);
        sliders[i].addChangeListener(this);
        values[i] = new JTextField();
        values[i].setEditable(false);
    }
    }


    /**
     * does stuff
     * @param i int
     */
    private void addSliderRow(int i) {
    rowC[i].add(labels[i]);
    values[i].setText(Integer.toString(sliders[i].getValue()));
    rowC[i].add(values[i]);
    rowC[i].add(new JLabel("         "));
    rowC[i].add(new JLabel(Integer.toString(sliders[i].getMinimum())));
    rowC[i].add(sliders[i]);
    rowC[i].add(new JLabel(Integer.toString(sliders[i].getMaximum())));
    }

  /**
   * Constructor for the GameOptionsDialog object
   * @param newGcw the Global Chat Window
   */
  public GameOptionsDialog(GlobalChatWindow newGcw) {
    super(newGcw.getTheFrame(), false);
    
    this.addWindowListener(new WindowAdapter() {
    public void windowClosing(WindowEvent e) {
      GlobalChatPanel gcp = (GlobalChatPanel) 
        gcw.getCurrentPanel();
      gcp.closeDialog();
    }
      });
    gcw = newGcw;
    gParam = new GameParameters();
    c = getContentPane();

    /*
    GridBagLayout gbGameOptionsDialog = new GridBagLayout();
    GridBagConstraints gbcGameOptionsDialog = new GridBagConstraints();
    */
 
    c.setLayout(new GridLayout(15, 1));
    
    initRows();

    /////// Game Name Row ////////////
    labels[0].setText("Game Name: ");
    gameNameField = new JTextField();
    gameNameField.setColumns(35);

    rowC[0].add(labels[0]);
    rowC[0].add(gameNameField);

    c.add(rowC[0]);

    ////////// Starting Money Row //////////////
    labels[1].setText("Starting Money: ");
    sliders[1].setMinimum(MIN_START_MONEY);
    sliders[1].setMaximum(MAX_START_MONEY);
    sliders[1].setMinorTickSpacing(1000);
    sliders[1].setValue(0);
    values[1].setColumns(5);

    addSliderRow(1);
    c.add(rowC[1]);

    /////////// Interest Rate Row ///////////////
    labels[2].setText("Interest Rate: ");
    sliders[2].setMinimum(MIN_INT_RATE);
    sliders[2].setMaximum(MAX_INT_RATE);
    sliders[2].setMinorTickSpacing(10);
    sliders[2].setValue(20);
    values[2].setColumns(3);

    addSliderRow(2);
    c.add(rowC[2]);

    ////////// Wind Behavior Row /////////////

    // MAKE RADIO BUTTONS
    labels[3].setText("Wind Behavior: ");
    
    rowC[3].add(labels[3]);
    rowC[3].add(noWindRadio);
    rowC[3].add(constantWindRadio);
    rowC[3].add(randomWindRadio);

    /*
    labels[3].setText("Wind Behavior: ");
    sliders[3].setMinimum(1);
    sliders[3].setMaximum(3);
    sliders[3].setMinorTickSpacing(10);
    sliders[3].setValue(40);
    values[3].setColumns(2);

    addSliderRow(3);
    */

    c.add(rowC[3]);

    //////////// Max Wind Row //////////////
    labels[4].setText("Maximum Wind Speed: ");
    sliders[4].setMinimum(MIN_MAX_WIND);
    sliders[4].setMaximum(MAX_MAX_WIND);
    sliders[4].setMinorTickSpacing(10);
    sliders[4].setValue(50);
    values[4].setColumns(3);

    addSliderRow(4);
    c.add(rowC[4]);

    //////////// Walls Row ////////////////
    labels[5].setText("Wall Types: ");
    
    rowC[5].add(labels[5]);
    rowC[5].add(stickyWallBox);
    rowC[5].add(wrapAroundWallBox);
    rowC[5].add(bouncyWallBox);
    rowC[5].add(noWallBox);
    
    c.add(rowC[5]);
    

    ///////////// Caves Row //////////

    labels[6].setText("Caves? ");
    
    rowC[6].add(labels[6]);
    rowC[6].add(cavesBox);

    c.add(rowC[6]);

    ///////// Num Rounds Row //////////
    labels[7].setText("Number of Rounds: ");
    sliders[7].setMinimum(MIN_NUM_ROUNDS);
    sliders[7].setMaximum(MAX_NUM_ROUNDS);
    sliders[7].setMinorTickSpacing(2);
    sliders[7].setValue(80);
    values[7].setColumns(2);

    addSliderRow(7);
    c.add(rowC[7]);

    //////////// Max Players Row //////
    labels[8].setText("Maximum Players: ");
    sliders[8].setMinimum(2);
    sliders[8].setMaximum(MAX_PLAYERS);
    sliders[8].setMinorTickSpacing(1);
    sliders[8].setSnapToTicks(true);
    sliders[8].setValue(3);
    values[8].setColumns(2);

    addSliderRow(8);
    c.add(rowC[8]);

    checkStyleSucks();
  }
  
  
  /**
   * CHECK STYLE SUCKS SO BAD
   * NO ONE EVER USES THIS CRAP
   */
   private void checkStyleSucks() {
    
    //////// Terrain Complexity ////////
    labels[9].setText("Terrain Complexity: ");
    sliders[9].setMinimum(MIN_TERRAIN_COMPLEXITY);
    sliders[9].setMaximum(MAX_TERRAIN_COMPLEXITY);
    sliders[9].setMinorTickSpacing(10);
    sliders[9].setValue(99);
    values[9].setColumns(3);

    addSliderRow(9);
    c.add(rowC[9]);

    ///////// Terrain Steepness /////////

    labels[10].setText("Terrain Steepness: ");
    sliders[10].setMinimum(MIN_TERRAIN_STEEPNESS);
    sliders[10].setMaximum(MAX_TERRAIN_STEEPNESS);
    sliders[10].setMinorTickSpacing(50);
    sliders[10].setValue(66);
    values[10].setColumns(4);

    addSliderRow(10);
    c.add(rowC[10]);

    ////////// Gravity ///////////////
    labels[11].setText("Gravity: ");
    sliders[11].setMinimum(MIN_GRAV);
    sliders[11].setMaximum(MAX_GRAV);
    sliders[11].setMinorTickSpacing(1);
    sliders[11].setSnapToTicks(true);
    sliders[11].setValue(50);
    values[11].setColumns(2);

    addSliderRow(11);
    c.add(rowC[11]);

    /////// Explosion Sizes ///////////
    labels[12].setText("Explosion Multiplier: ");
    
    rowC[12].add(labels[12]);
    rowC[12].add(smallExplRadio);
    rowC[12].add(medExplRadio);
    rowC[12].add(largeExplRadio);

    /*
    // MAKE RADIO BUTTONS INSTEAD
    labels[12].setText("Explosion Multiplier: ");
    sliders[12].setMinimum(1);
    sliders[12].setMaximum(4);
    sliders[12].setMinorTickSpacing(1);
    sliders[12].setSnapToTicks(true);
    sliders[12].setValue(2);
    values[12].setColumns(2);

    addSliderRow(12);
    */

    c.add(rowC[12]);

    ///////////// Private Game? Row /////////////
    labels[13].setText("Private Game Setup: ");
    passwordField = new JPasswordField(10);
    passwordField.setEditable(false);
    privateBox.addActionListener(this);

    rowC[13].add(labels[13]);
    rowC[13].add(privateBox);
    rowC[13].add(new JLabel("      "));
    rowC[13].add(passwordLabel);
    rowC[13].add(passwordField);

    c.add(rowC[13]);

    // Now add buttons

    rowC[14].setLayout(new GridLayout(1, 2));

    btCreate = new JButton("Create New Game");
    btCreate.addActionListener(this);
    rowC[14].add(btCreate);
    
    btDefault = new JButton("Reset To Defaults");
    btDefault.addActionListener(this);
    rowC[14].add(btDefault);

    c.add(rowC[14]);

    // init all values
    resetValues();

    // Show gui now
    setSize(500, 530);
    show();    
    
    }
  
  
  
  /**
   * does stuff
   */
  public void resetValues() {
    float levelComplex;

    gParam = new GameParameters();
    gameNameField.setText(gParam.getName());
    sliders[1].setValue(gParam.getStartingMoney());
    sliders[2].setValue(gParam.getInterestRate());
    noWindRadio.setSelected(true);
    sliders[4].setValue(gParam.getMaxWind());
    sliders[7].setValue(gParam.getNumRounds());
    sliders[8].setValue(gParam.getMaxPlayers());

    // update level complexity slider here
    levelComplex = gParam.getLevelComplexity();
    levelComplex = levelComplex * TERRAIN_COMPLEXITY_DIVIDER;
    levelComplex = levelComplex - 1;
    sliders[9].setValue((int) levelComplex);

    sliders[10].setValue(gParam.getLevelSteepness() - TERRAIN_STEEPNESS_OFFSET);
    sliders[11].setValue(gParam.getGravity());
    smallExplRadio.setSelected(true);
    
    privateBox.setSelected(gParam.getIsGamePrivate());
    passwordField.setText(gParam.getPassword());
    passwordField.setEditable(privateBox.isSelected());
    passwordLabel.setEnabled(privateBox.isSelected());
    
    // Fix defaulting the wall boxes here
    stickyWallBox.setSelected(false);
    wrapAroundWallBox.setSelected(false);
    bouncyWallBox.setSelected(false);
    noWallBox.setSelected(true);
    
    cavesBox.setSelected(gParam.getIsCave());
  }


  /**
   * Does appropriate action for thing manipulated
   * @param e action event coming in
   */
  public void actionPerformed(ActionEvent e) {
    if (e.getSource() == btCreate) {
    int wallBehavior = 0;

    gParam.setName(gameNameField.getText());
    gParam.setStartingMoney(sliders[1].getValue());
    gParam.setInterestRate(sliders[2].getValue());
    gParam.setMaxWind(sliders[4].getValue());
    gParam.setNumRounds(sliders[7].getValue());
    gParam.setMaxPlayers(sliders[8].getValue());

    // do setting level complexity here from sliders[9]
    float levelComplex = sliders[9].getValue() / TERRAIN_COMPLEXITY_DIVIDER;
    gParam.setLevelComplexity(levelComplex + 1);

    gParam.setLevelSteepness(sliders[10].getValue() 
    + TERRAIN_STEEPNESS_OFFSET);

    gParam.setGravity(sliders[11].getValue());
    
    gParam.setIsGamePrivate(privateBox.isSelected());
    if (gParam.getIsGamePrivate()) {
      gParam.setPassword(new String(passwordField.getPassword()));
    }

    // wall behavior
    if (stickyWallBox.isSelected()) {
      wallBehavior += STICKY_WALLS;
    }
    if (wrapAroundWallBox.isSelected()) {
      wallBehavior += WRAP_WALLS; 
    }
    if (bouncyWallBox.isSelected()) {
      wallBehavior += BOUNCY_WALLS;
    }
    if (noWallBox.isSelected()) {
      wallBehavior += NO_WALLS;
    }
    gParam.setWallBehavior(wallBehavior);
    
    // wind behavior
    if (noWindRadio.isSelected()) {
      gParam.setWindBehavior(NO_WIND);
    } else if (randomWindRadio.isSelected()) {
      gParam.setWindBehavior(VAR_WIND);
    } else if (constantWindRadio.isSelected()) {
      gParam.setWindBehavior(CONST_WIND);
    }

    // explosion size
    if (smallExplRadio.isSelected()) {
      gParam.setExplosionSize(SMALL);
    } else if (medExplRadio.isSelected()) {
      gParam.setExplosionSize(MEDIUM);
    } else if (largeExplRadio.isSelected()) {
      gParam.setExplosionSize(LARGE);
    }

    // do caves
    gParam.setIsCave(cavesBox.isSelected());

    gParam.setRandomSeed((long) (Math.random() * 1000000));

    System.out.println(gParam);
    if (gParam.getIsGamePrivate() 
            && (gParam.getPassword()).equals("")) {
        JOptionPane.showMessageDialog(this, 
            "The game is private and the password field is empty");
    } else {
        gcw.createGame(gParam);
    }
      
    } else if (e.getSource() == btDefault) {
    resetValues();
      } else if (e.getSource() == privateBox) {
      passwordField.setEditable(privateBox.isSelected());
      passwordLabel.setEnabled(privateBox.isSelected());
    }

  } 



  /**
   * does stuff
   * @param e ChangeEvent
   */
  public void stateChanged(ChangeEvent e) {
    if (e.getSource() == sliders[1]) {
      values[1].setText("$" + Integer.toString(sliders[1].getValue()));
      //gparam.
    } else if (e.getSource() == sliders[2]) {
      values[2].setText(Integer.toString(sliders[2].getValue()) + "%");
      //gparam.
    } else if (e.getSource() == sliders[3]) {
      values[3].setText(Integer.toString(sliders[3].getValue()));
      //gparam.
    } else if (e.getSource() == sliders[4]) {
      values[4].setText(Integer.toString(sliders[4].getValue()));
      //gparam.
    } else if (e.getSource() == sliders[7]) {
      values[7].setText(Integer.toString(sliders[7].getValue()));
      //gparam.
    } else if (e.getSource() == sliders[8]) {
      values[8].setText(Integer.toString(sliders[8].getValue()));
      //gparam.
    } else if (e.getSource() == sliders[9]) {
      values[9].setText(Integer.toString(sliders[9].getValue()));
      //gparam.
    } else if (e.getSource() == sliders[10]) {
      values[10].setText(Integer.toString(sliders[10].getValue()));
      //gparam.
    } else if (e.getSource() == sliders[11]) {
      values[11].setText(Integer.toString(sliders[11].getValue()) + "G");
      //gparam.
    } else if (e.getSource() == sliders[12]) {
      values[12].setText(Integer.toString(sliders[12].getValue()));
      //gparam.
    }

  }

} 
