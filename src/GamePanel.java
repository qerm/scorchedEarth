//======================================================
// Source code generated by jvider v1.2.3 UNREGISTERED version.
// http://www.jvider.com/
//======================================================
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import java.awt.Dimension;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.Vector;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;
import javax.swing.Timer;
/**
 * @author  Administrator
 * @created April 16, 2003
 */
public class GamePanel extends JPanel implements Constants,
                         ActionListener, KeyListener {

  /**
  * gui stuff
  */ 
  private LocalTank myTank;
    
  /**
  * gui stuff
  */
  private Timer time = null;   
  
  /**
  * gui stuff
  */
  private JPanel pnInGamePanel;
  
  /**
  * gui stuff
  */
  private JButton btAngleLeft;
  
  /**
  * gui stuff
  */
  private JButton btAngleRight;
  
  /**
  * gui stuff
  */
  private JButton btPowerUp;
  
  /**
  * gui stuff
  */
  private JButton btPowerDown;
  
  /**
  * gui stuff
  */
  private JComboBox cmbWeaponCombo;
  
  /**
  * gui stuff
  */
  private JButton btFire;
  
  /**
  * gui stuff
  */
  private GameView gameView;
  
  /**
  * gui stuff
  */
  private GameCanvas pnGameCanvas;
 
  /**
  * gui stuff
  */
  private JLabel lbStatusBar;
  /**
  * gui stuff
  */
  private JLabel lbPowerBar;
  
   /**
   * the client thread
   */
  private ClientThread client;

/**
* the game model
*/
  private GameModel gameModel;

/**
* client's turn state variable
*/
  private boolean isMyTurn = false;
  
  /**
  * animating state variable
  */
  private boolean isAnimating = false;
  
 /**
  * the time offset
  */
  private int timeOffset = 0;

    
  /**
   * Get the IsMyTurn value.
   * @return boolean the IsMyTurn value.
   */
  public boolean getIsMyTurn() {
    return isMyTurn;
  }

  /**
   * Set the IsMyTurn value.
   * @param newIsMyTurn The new IsMyTurn value.
   */
  public void setIsMyTurn(boolean newIsMyTurn) {
    this.isMyTurn = newIsMyTurn;
    updatePower();
    timeOffset = 0;
  }

  /**
   * state variable, so you send player_dead commands
   * only once to the server
   */
  private boolean deadThisTurn;
  
  /**
   * Get the value of deadThisTurn.
   * @return value of deadThisTurn.
   */
  public boolean isDeadThisTurn() {
    return deadThisTurn;
  }
  
  /**
   * Set the value of deadThisTurn.
   * @param v  Value to assign to deadThisTurn.
   */
  public void setDeadThisTurn(boolean  v) {
    this.deadThisTurn = v;
  }
  

  
  /**
   * Constructor for GamePanelFrame
   * @param newClient the ClientThread
   * @param newGameModel the GameModel
   * @param gv go
   */
  public GamePanel(ClientThread newClient,
           GameModel newGameModel,
           GameView gv) {
    deadThisTurn = false;
     gameView = gv;
     client = newClient;
     gameModel = newGameModel;
     GridBagLayout gbInGamePanel = new GridBagLayout();
     GridBagConstraints gbcInGamePanel = new GridBagConstraints();
     this.setLayout(gbInGamePanel);
     btAngleLeft = new JButton("turret left");
     btAngleLeft.addActionListener(this);
     btAngleLeft.addKeyListener(this);
     //btAngleLeft.setFocusable(false);
     btAngleLeft.resetKeyboardActions();
     gbcInGamePanel.gridx = 0;
     gbcInGamePanel.gridy = 19;
     gbcInGamePanel.gridwidth = 1;
     gbcInGamePanel.gridheight = 1;
     gbcInGamePanel.fill = GridBagConstraints.BOTH;
     gbcInGamePanel.weightx = 1;
     gbcInGamePanel.weighty = 0;
     gbcInGamePanel.anchor = GridBagConstraints.NORTH;
     gbInGamePanel.setConstraints(btAngleLeft, gbcInGamePanel);
     this.add(btAngleLeft);
     btAngleRight = new JButton("turret right");
     btAngleRight.addActionListener(this);
     btAngleRight.addKeyListener(this);
     //btAngleRight.setFocusable(false);
     btAngleRight.resetKeyboardActions();
     gbcInGamePanel.gridx = 1;
     gbcInGamePanel.gridy = 19;
     gbcInGamePanel.gridwidth = 1;
     gbcInGamePanel.gridheight = 1;
     gbcInGamePanel.fill = GridBagConstraints.BOTH;
     gbcInGamePanel.weightx = 1;
     gbcInGamePanel.weighty = 0;
     gbcInGamePanel.anchor = GridBagConstraints.NORTH;
     gbInGamePanel.setConstraints(btAngleRight, gbcInGamePanel);
     this.add(btAngleRight);
     btPowerUp = new JButton("increase power");
     btPowerUp.addActionListener(this);
     btPowerUp.addKeyListener(this);
     //btPowerUp.setFocusable(false);
     btPowerUp.resetKeyboardActions();
     gbcInGamePanel.gridx = 2;
     gbcInGamePanel.gridy = 19;
     gbcInGamePanel.gridwidth = 1;
     gbcInGamePanel.gridheight = 1;
     gbcInGamePanel.fill = GridBagConstraints.BOTH;
     gbcInGamePanel.weightx = 1;
     gbcInGamePanel.weighty = 0;
     gbcInGamePanel.anchor = GridBagConstraints.NORTH;
     gbInGamePanel.setConstraints(btPowerUp, gbcInGamePanel);
     this.add(btPowerUp);
     btPowerDown = new JButton("decrease power");
     btPowerDown.addActionListener(this);
     btPowerDown.addKeyListener(this);
     //btPowerDown.setFocusable(false);
     btPowerDown.resetKeyboardActions();
     gbcInGamePanel.gridx = 3;
     gbcInGamePanel.gridy = 19;
     gbcInGamePanel.gridwidth = 1;
     gbcInGamePanel.gridheight = 1;
     gbcInGamePanel.fill = GridBagConstraints.BOTH;
     gbcInGamePanel.weightx = 1;
     gbcInGamePanel.weighty = 0;
     gbcInGamePanel.anchor = GridBagConstraints.NORTH;
     gbInGamePanel.setConstraints(btPowerDown, gbcInGamePanel);
     this.add(btPowerDown);
     cmbWeaponCombo = new JComboBox(WEAPONS);
     cmbWeaponCombo.addKeyListener(this);
     cmbWeaponCombo.addActionListener(this);
     //cmbWeaponCombo.setFocusable(false);
     cmbWeaponCombo.resetKeyboardActions();
     gbcInGamePanel.gridx = 4;
     gbcInGamePanel.gridy = 19;
     gbcInGamePanel.gridwidth = 1;
     gbcInGamePanel.gridheight = 1;
     gbcInGamePanel.fill = GridBagConstraints.BOTH;
     gbcInGamePanel.weightx = 1;
     gbcInGamePanel.weighty = 0;
     gbcInGamePanel.anchor = GridBagConstraints.NORTH;
     gbInGamePanel.setConstraints(cmbWeaponCombo, gbcInGamePanel);
     this.add(cmbWeaponCombo);
     btFire = new JButton("Fire!");
     btFire.addActionListener(this);
     btFire.addKeyListener(this);
     //btFire.setFocusable(false);
     btFire.resetKeyboardActions();
     gbcInGamePanel.gridx = 5;
     gbcInGamePanel.gridy = 19;
     gbcInGamePanel.gridwidth = 1;
     gbcInGamePanel.gridheight = 1;
     gbcInGamePanel.fill = GridBagConstraints.BOTH;
     gbcInGamePanel.weightx = 1;
     gbcInGamePanel.weighty = 0;
     gbcInGamePanel.anchor = GridBagConstraints.NORTH;
     gbInGamePanel.setConstraints(btFire, gbcInGamePanel);
     this.add(btFire);
     pnGameCanvas = new GameCanvas(gameModel);
     GridBagLayout gbGameCanvas = new GridBagLayout();
     GridBagConstraints gbcGameCanvas = new GridBagConstraints();
     pnGameCanvas.setLayout(gbGameCanvas);
     pnGameCanvas.setPreferredSize(new Dimension(800, 640));
     pnGameCanvas.setFocusable(true);
     pnGameCanvas.addKeyListener(this);
     gbcInGamePanel.gridx = 0;
     gbcInGamePanel.gridy = 1;
     gbcInGamePanel.gridwidth = 6;
     gbcInGamePanel.gridheight = 18;
     gbcInGamePanel.fill = GridBagConstraints.BOTH;
     gbcInGamePanel.weightx = 1;
     gbcInGamePanel.weighty = 1;
     gbcInGamePanel.anchor = GridBagConstraints.NORTH;
     gbInGamePanel.setConstraints(pnGameCanvas, gbcInGamePanel);
     this.add(pnGameCanvas);
     lbPowerBar = new JLabel("Status:      Power: 0       Angle: 0");     
     gbcInGamePanel.gridx = 0;
     gbcInGamePanel.gridy = 0;
     gbcInGamePanel.gridwidth = 6;
     gbcInGamePanel.gridheight = 1;
     gbcInGamePanel.fill = GridBagConstraints.HORIZONTAL;
     gbcInGamePanel.weightx = 0;
     gbcInGamePanel.weighty = 0;
     gbcInGamePanel.anchor = GridBagConstraints.NORTH;
     gbInGamePanel.setConstraints(lbPowerBar, gbcInGamePanel);
     this.add(lbPowerBar);
     time = new Timer(30, this);
     time.start();
    this.addKeyListener(this);
    Vector playerList = gameModel.getPlayerList();
    Tank temp;
    for (int i = 0; i < playerList.size(); i++) {
    
        temp = (Tank) playerList.get(i);
        if (temp instanceof LocalTank) {
            myTank = (LocalTank) temp;
            break;
        }
    }

    updatePower();     
  }


  /**
   *hey
   * @param ae ad
   */
  public void actionPerformed(ActionEvent ae) {
   
        if ((ae == null) || (ae.getActionCommand() == null)) {
            timeOffset++;
   
            if (timeOffset > 50 && isMyTurn) {
                timeOffset = 0;
                client.sendTurretMove(myTank.getTurretAngle());
            } else if (timeOffset > 50) {
                timeOffset = 0;
            }
            
            
            if (!gameModel.update()) {
                isAnimating = true;
                pnGameCanvas.repaint();
            } else if (isAnimating) {
                if (myTank.getIsDead()) {
          if (!deadThisTurn) {
            deadThisTurn = true;
                    client.sendDead(myTank.getKiller());
          }
                }
                
                GameParameters gParam = gameModel.getGParam();
                if (gParam.getWindBehavior() == VAR_WIND) {
                    gameModel.changeWind();
                }

                isAnimating = false;
                
                
                Vector v = gameModel.getPlayerList();
                int numAlive = 0;
                Tank temp;
                Tank alive = null;
                for (int i = 0; i < v.size(); i++) {
                    temp = (Tank) v.get(i);
                    if (!temp.getIsDead()) {
                        numAlive++;
                        alive = temp;
                    } 
                    
                }
                
                client.sendDone();
                if (numAlive < 2) {
                    if (alive == null) {
                        JOptionPane.showMessageDialog(this, 
                        " This round was a tie ");
                    } else {    
                        JOptionPane.showMessageDialog(this, 
                        alive.getName() 
                        + " has won the round "); 
                    }
                    
                    gameView.operationScorchedEarthFreedom();    
                }

                                
           
        }
    }
        
                        
        

    if (isMyTurn) {
        
        if (ae.getSource() == btAngleLeft) {
            int angle = myTank.getTurretAngle();
            angle += 1;
            if (angle > 180) { angle = 0; }
            myTank.setTurretAngle(angle);
            pnGameCanvas.repaint();
            updatePower();
    
        } else if (ae.getSource() == btAngleRight) {
            int angle = myTank.getTurretAngle();
            angle -= 1;
            if (angle < 0) { angle = 180; }
            myTank.setTurretAngle(angle);
            pnGameCanvas.repaint();
            updatePower();

       } else if (ae.getSource() == btPowerUp) {
            int power = myTank.getPower();
            power += 1;
            if (power > 1000) { power = 0; }
            myTank.setPower(power);
            updatePower();

      } else if (ae.getSource() == btPowerDown) {
            int power = myTank.getPower();
            power -= 1;
            if (power < 0) { power = 1000; }
            myTank.setPower(power);
            updatePower();
    
      } else if (ae.getSource() == btFire) {
            int power = myTank.getPower();
            int angle = myTank.getTurretAngle();
            Weapons w = myTank.getWeapons();
            if (cmbWeaponCombo.getSelectedIndex() == BABY_MISSILE) {
                client.sendFire(power, angle, 
                    cmbWeaponCombo.getSelectedIndex());
                updatePower();
                setIsMyTurn(false);
            } else if (w.getInvItem(cmbWeaponCombo.getSelectedIndex()) > 0) {
                w.setInvItem(cmbWeaponCombo.getSelectedIndex(), 
                    w.getInvItem(cmbWeaponCombo.getSelectedIndex()) - 1);
                client.sendFire(power, angle, 
                    cmbWeaponCombo.getSelectedIndex());
                updatePower();
                setIsMyTurn(false);                
            }
                     
    } else if (ae.getSource() == cmbWeaponCombo) {
        updatePower();
    }
    } 
  }
  
  
  

/**
* Keypressed method
* @param e the KeyEvent
*/
    public void keyPressed(KeyEvent e) {
 
        int power = 0;
        int angle = 0;
        
        if (isMyTurn) {        
            switch (e.getKeyCode()) {
        
            case (KeyEvent.VK_UP):
                power = myTank.getPower();
                power += 10;
                if (power > 1000) { power = 0; }
                myTank.setPower(power);

                break;
    
            case (KeyEvent.VK_DOWN):
                power = myTank.getPower();
                power -= 10;
                if (power < 0) { power = 1000; }
                myTank.setPower(power);

                break;
    
            case (KeyEvent.VK_LEFT):
                angle = myTank.getTurretAngle();
                angle += 10;
                if (angle > 180) { angle = 0; }
                myTank.setTurretAngle(angle);
                pnGameCanvas.repaint(); 

                break;
    
            case (KeyEvent.VK_RIGHT):
                angle = myTank.getTurretAngle();
                angle -= 10;
                if (angle < 0) { angle = 180; }
                myTank.setTurretAngle(angle);
                pnGameCanvas.repaint(); 

                break;


        
            case (KeyEvent.VK_S):
            power = myTank.getPower();
            angle = myTank.getTurretAngle();
            Weapons w = myTank.getWeapons();
                if (cmbWeaponCombo.getSelectedIndex() == BABY_MISSILE) {
                    client.sendFire(power, angle, 
                        cmbWeaponCombo.getSelectedIndex());
                    updatePower();
                    setIsMyTurn(false);
                } else if (w.getInvItem
                    (cmbWeaponCombo.getSelectedIndex()) > 0) {
                    w.setInvItem(cmbWeaponCombo.getSelectedIndex(), 
                        w.getInvItem(cmbWeaponCombo.getSelectedIndex()) - 1);
                    client.sendFire(power, angle, 
                        cmbWeaponCombo.getSelectedIndex());
                    updatePower();
                    setIsMyTurn(false);                
                }
                break;
            default:
                break;
        
            
            }//end of switch
            updatePower();   
        }//end if my turn
        
        
             
    }// end of public void keyPressed(KeyEvent e)


/**
* keyReleased method
* @param e the KeyEvent
*/
    public void keyReleased(KeyEvent e) {
    }
    
    /**
    * keyTyped method
    * @param e the KeyEvent
    */
    public void keyTyped(KeyEvent e) {
    }


/**
* updates power
*/
    public void updatePower() {
        
     
        Weapons w = myTank.getWeapons();
     
        
        String wall;
        switch (gameModel.getWallType()) {
            case STICKY_WALLS:
                wall = "Sticky";
            break;
            
            case WRAP_WALLS:
                wall = "Wrap around";
            break;
            
            case BOUNCY_WALLS:
                wall = "Bouncy";
            break;
            
            case NO_WALLS:
                wall = "No walls";
            break;        
            
            default:
                wall = "ERROR";
            break;
        }
        
        
                
     
        if (isMyTurn) {
         lbPowerBar.setText("!!!YOUR TURN!!!   Power: " 
            + myTank.getPower() 
            + "   Angle: " 
            + myTank.getTurretAngle()
            + "   Health: "
            + myTank.getHp()
            + "     "
            + WEAPONS[cmbWeaponCombo.getSelectedIndex()]
            + ": "
            + w.getInvItem(cmbWeaponCombo.getSelectedIndex())
            + "   Wind: "
            + gameModel.getWindSpeed()
            + "   Walls: "
            + wall);

        } else {

         lbPowerBar.setText("                         Power: " 
            + myTank.getPower() 
            + "          Angle: " 
            + myTank.getTurretAngle()
            + "          Health: "
            + myTank.getHp()
            + "          "
            + WEAPONS[cmbWeaponCombo.getSelectedIndex()]
            + ": "
            + w.getInvItem(cmbWeaponCombo.getSelectedIndex())
            + "          Wind: "
            + gameModel.getWindSpeed()
            + "   Walls: "
            + wall);

        }

            
    }

    
    /**
    * disables the timer
    */
    public void killTimer() {
        time.stop();
    }


} 




