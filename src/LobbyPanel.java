//======================================================
// Source code generated by jvider v1.2.3 UNREGISTERED version.
// http://www.jvider.com/
//======================================================
//import javax.swing.JFrame;
//import javax.swing.UIManager;
//import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.JPanel;
import javax.swing.BorderFactory;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JButton;
import java.awt.Color;
import java.util.Vector;
//import java.util.StringTokenizer;
import java.awt.Dimension;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JOptionPane;
/**
 * @author Team QERM
 * @created April 15, 2003
 */
public class LobbyPanel extends JPanel implements Constants, 
                          ActionListener { 

  /**
   * The number of players in the lobby
   */
   private int numPlayers = 0;


  /**
   * Drop-down menu for choosing player color
   */
  private JComboBox cmbColorChooser;
  
  /**
   * Label that says "Your Color"
   */
  private JLabel lbYourColor;
  
  /**
   * Only for hosts, starts the game
   */
  private JButton btStartGame;
  
  /**
   * this panel displays the list of players
   * in this game.
   */
  private JPanel pnPlayerList; 
 
  /**
   * the GameChatPanel added to this lobby
   */
  private GameChatPanel gcp;
  
  /**
   * Get the Gcp value.
   * @return the Gcp value.
   */
  public GameChatPanel getGcp() {
    return gcp;
  }

  /**
   * Set the Gcp value.
   * @param newGcp The new Gcp value.
   */
  public void setGcp(GameChatPanel newGcp) {
    this.gcp = newGcp;
  }

    
  /**
   * The ClientThread
   */
  private ClientThread client;
  
  /**
   * Get the Client value.
   * @return the Client value.
   */
  public ClientThread getClient() {
    return client;
  }

  /**
   * Set the Client value.
   * @param newClient The new Client value.
   */
  public void setClient(ClientThread newClient) {
    this.client = newClient;
  }

  /**
   * The array of JLabels to display in the pnPlayerList
   */
  private JLabel players[];
  
  /**
   * Get the Players value.
   * @return the Players value.
   */
  public JLabel[] getPlayers() {
    return players;
  }

  /**
   * Set the Players value.
   * @param newPlayers The new Players value.
   */
  public void setPlayers(JLabel[] newPlayers) {
    this.players = newPlayers;
  }

  /**
   * whether or not this client is the host
   */
  private boolean isHost;
  
  /**
   * Get the IsHost value.
   * @return the IsHost value.
   */
  public boolean getIsHost() {
    return isHost;
  }

  /**
   * Set the IsHost value.
   * @param newIsHost The new IsHost value.
   */
  public void setIsHost(boolean newIsHost) {
    this.isHost = newIsHost;
  }


  /**
   * default constructor for LobbyPanel
   * Junit only
   */
  public LobbyPanel() {
    //    this (null, false);
  }
  
  /**
   * constructor for LobbyPanel
   * @param newClient the ClientThread
   * @param newIsHost new isHost value
   */
  public LobbyPanel(ClientThread newClient, 
            boolean newIsHost) {
    super();
    client = newClient;
    isHost = newIsHost;
    GridBagLayout gbLobbyPanel = new GridBagLayout();
    GridBagConstraints gbcLobbyPanel = new GridBagConstraints();
    this.setLayout(gbLobbyPanel);
    
    String []sColorChooser = {"Pink",
                  "Blue",
                  "Cyan",
                  "Gray",
                  "Green",
                  "Orange",
                  "Red",
                  "Yellow"};
    cmbColorChooser = new JComboBox(sColorChooser);
    cmbColorChooser.addActionListener(this);

    gbcLobbyPanel.gridx = 15;
    gbcLobbyPanel.gridy = 19;
    gbcLobbyPanel.gridwidth = 5;
    gbcLobbyPanel.gridheight = 1;
    gbcLobbyPanel.fill = GridBagConstraints.HORIZONTAL;
    gbcLobbyPanel.weightx = 0;
    gbcLobbyPanel.weighty = 0;
    gbcLobbyPanel.anchor = GridBagConstraints.NORTH;
    gbLobbyPanel.setConstraints(cmbColorChooser, gbcLobbyPanel);
    this.add(cmbColorChooser);
    
    lbYourColor = new JLabel("Your Color");
    gbcLobbyPanel.gridx = 10;
    gbcLobbyPanel.gridy = 19;
    gbcLobbyPanel.gridwidth = 5;
    gbcLobbyPanel.gridheight = 1;
    gbcLobbyPanel.fill = GridBagConstraints.NONE;
    gbcLobbyPanel.weightx = 0;
    gbcLobbyPanel.weighty = 0;
    gbcLobbyPanel.anchor = GridBagConstraints.NORTH;
    gbLobbyPanel.setConstraints(lbYourColor, gbcLobbyPanel);
    this.add(lbYourColor);

    btStartGame = new JButton("Start");
    if (isHost) {
      btStartGame.addActionListener(this);
        
      gbcLobbyPanel.gridx = 0;
      gbcLobbyPanel.gridy = 19;
      gbcLobbyPanel.gridwidth = 4;
      gbcLobbyPanel.gridheight = 1;
      gbcLobbyPanel.fill = GridBagConstraints.NONE;
      gbcLobbyPanel.weightx = 0;
      gbcLobbyPanel.weighty = 0;
      gbcLobbyPanel.anchor = GridBagConstraints.NORTH;
      gbLobbyPanel.setConstraints(btStartGame, gbcLobbyPanel);
      this.add(btStartGame);
    }
      
    gcp = new GameChatPanel(client);
    gcp.
      setBorder(BorderFactory.createTitledBorder("Game Chat"));
    gbcLobbyPanel.gridx = 0;
    gbcLobbyPanel.gridy = 0;
    gbcLobbyPanel.gridwidth = 15;
    gbcLobbyPanel.gridheight = 19;
    gbcLobbyPanel.fill = GridBagConstraints.BOTH;
    gbcLobbyPanel.weightx = 1;
    gbcLobbyPanel.weighty = 1;
    gbcLobbyPanel.anchor = GridBagConstraints.NORTH;
    gbLobbyPanel.setConstraints(gcp, gbcLobbyPanel);
    this.add(gcp);
    
    pnPlayerList = new JPanel();
    pnPlayerList.setBorder(BorderFactory.createTitledBorder("Players"));
    pnPlayerList.setLayout(new GridLayout(MAX_PLAYERS, 1));
    players = new JLabel[MAX_PLAYERS];
    for (int i = 0; i < players.length; i++) {
      players[i] = new JLabel("empty");
      players[i].setForeground(Color.BLACK);
      pnPlayerList.add(players[i]);
    }

    gbcLobbyPanel.gridx = 15;
    gbcLobbyPanel.gridy = 0;
    gbcLobbyPanel.gridwidth = 5;
    gbcLobbyPanel.gridheight = 19;
    gbcLobbyPanel.fill = GridBagConstraints.BOTH;
    gbcLobbyPanel.weightx = 0;
    gbcLobbyPanel.weighty = 1;
    gbcLobbyPanel.anchor = GridBagConstraints.NORTH;
    gbLobbyPanel.setConstraints(pnPlayerList, gbcLobbyPanel);
    this.add(pnPlayerList);
    setPreferredSize(new Dimension(450, 350));
  }


  /**
   * performs an action
   * @param e ActionEvent
   */
  public void actionPerformed(ActionEvent e) {
    if (e.getSource() == btStartGame) {
      if (numPlayers >= 2) {        
         client.startGame();
      } else {
        JOptionPane.showMessageDialog(this,
            "You need at least 2 players to play");
        }
    } else if (e.getSource() == cmbColorChooser) {
      setColor(cmbColorChooser.getSelectedIndex());
    }
  }

 /**
   * sends a CHOOSE_COLOR command to the ClientThread
   * @param color the color value to send
   */
  private void setColor(int color) {
    client.requestColor(color);
  }

  /**
   * calls ct's leaveGame() method, for when the client
   * is leaving a game
   */
  private void leaveGame() {
    client.leaveGame();
  }

  /**
   * calls ct's startGame() method, for when game host
   * starts game
   */
  private void startGame() {
    client.startGame();
  }

  /**
   * Updates the player list.
   *
   * @param playerList the DELIM-delimited string of players and colors.
   */
  public void updatePlayerList(Vector playerList) {
    this.invalidate();
    numPlayers = playerList.size();
    pnPlayerList.removeAll();
    pnPlayerList.setLayout(new GridLayout(MAX_PLAYERS, 1));
    for (int i = 0; i < players.length; i++) {
      if (i < playerList.size()) {
    Tank t = (Tank) playerList.get(i);
    players[i] = new JLabel(t.getName());
    players[i].setForeground(COLORS[t.getColor()]);
      } else {
    players[i] = new JLabel("empty");
    players[i].setForeground(Color.BLACK);
      }
      pnPlayerList.add(players[i]);
      
    }
    this.validate();
  }

  /**
   * updates the chat window in the GameChatPanel
   * @param name the name of the user sending the message
   * @param message the message being recieved
   */
  public void updateChatWindow(String name, String message) {
    gcp.updateChatWindow(name, message);
  }

}
 

